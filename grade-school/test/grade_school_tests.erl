%% Based on canonical data version 1.0.0
%% https://github.com/exercism/problem-specifications/raw/master/exercises/grade-school/canonical-data.json
%% This file is automatically generated from the exercises canonical data.

-module(grade_school_tests).

-include_lib("erl_exercism/include/exercism.hrl").
-include_lib("eunit/include/eunit.hrl").




'1_adding_a_student_adds_them_to_the_sorted_roster_test'() ->
    S0 = grade_school:new(),
    S1 = grade_school:add("Aimee", 2, S0),
    ?assertEqual(["Aimee"],
		 lists:sort(grade_school:get(S1))).

'2_adding_more_student_adds_them_to_the_sorted_roster_test'() ->
    S0 = grade_school:new(),
    S1 = grade_school:add("Blair", 2, S0),
    S2 = grade_school:add("James", 2, S1),
    S3 = grade_school:add("Paul", 2, S2),
    ?assertEqual(["Blair", "James", "Paul"],
		 lists:sort(grade_school:get(S3))).

'3_adding_students_to_different_grades_adds_them_to_the_same_sorted_roster_test'() ->
    S0 = grade_school:new(),
    S1 = grade_school:add("Chelsea", 3, S0),
    S2 = grade_school:add("Logan", 7, S1),
    ?assertEqual(["Chelsea", "Logan"],
		 lists:sort(grade_school:get(S2))).

'4_roster_returns_an_empty_list_if_there_are_no_students_enrolled_test'() ->
    S0 = grade_school:new(),
    ?assertEqual([], lists:sort(grade_school:get(S0))).

'5_student_names_with_grades_are_displayed_in_the_same_sorted_roster_test'() ->
    S0 = grade_school:new(),
    S1 = grade_school:add("Peter", 2, S0),
    S2 = grade_school:add("Anna", 1, S1),
    S3 = grade_school:add("Barb", 1, S2),
    S4 = grade_school:add("Zoe", 2, S3),
    S5 = grade_school:add("Alex", 2, S4),
    S6 = grade_school:add("Jim", 3, S5),
    S7 = grade_school:add("Charlie", 1, S6),
    ?assertEqual(["Alex", "Anna", "Barb", "Charlie", "Jim",
		  "Peter", "Zoe"],
		 lists:sort(grade_school:get(S7))).

'6_grade_returns_the_students_in_that_grade_in_alphabetical_order_test'() ->
    S0 = grade_school:new(),
    S1 = grade_school:add("Franklin", 5, S0),
    S2 = grade_school:add("Bradley", 5, S1),
    S3 = grade_school:add("Jeff", 1, S2),
    ?assertEqual(["Bradley", "Franklin"],
		 lists:sort(grade_school:get(5, S3))).

'7_grade_returns_an_empty_list_if_there_are_no_students_in_that_grade_test'() ->
    S0 = grade_school:new(),
    ?assertEqual([], lists:sort(grade_school:get(1, S0))).
